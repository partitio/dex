// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package ldapaggregator

import context "context"

import gorm1 "github.com/jinzhu/gorm"

import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type LdapAggregatorDefaultServer struct {
	DB *gorm1.DB
}

// List ...
func (m *LdapAggregatorDefaultServer) List(ctx context.Context, in *ListRequest) (*ListResponse, error) {
	db := m.DB
	if custom, ok := interface{}(in).(LdapAggregatorLdapConfigWithBeforeList); ok {
		var err error
		if db, err = custom.BeforeList(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err := DefaultListLdapConfig(ctx, db)
	if err != nil {
		return nil, err
	}
	out := &ListResponse{Results: res}
	if custom, ok := interface{}(in).(LdapAggregatorLdapConfigWithAfterList); ok {
		var err error
		if err = custom.AfterList(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// LdapAggregatorLdapConfigWithBeforeList called before DefaultListLdapConfig in the default List handler
type LdapAggregatorLdapConfigWithBeforeList interface {
	BeforeList(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// LdapAggregatorLdapConfigWithAfterList called before DefaultListLdapConfig in the default List handler
type LdapAggregatorLdapConfigWithAfterList interface {
	AfterList(context.Context, *ListResponse, *gorm1.DB) error
}

// Create ...
func (m *LdapAggregatorDefaultServer) Create(ctx context.Context, in *CreateRequest) (*CreateResponse, error) {
	db := m.DB
	if custom, ok := interface{}(in).(LdapAggregatorLdapConfigWithBeforeCreate); ok {
		var err error
		if db, err = custom.BeforeCreate(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err := DefaultCreateLdapConfig(ctx, in.GetPayload(), db)
	if err != nil {
		return nil, err
	}
	out := &CreateResponse{Result: res}
	if custom, ok := interface{}(in).(LdapAggregatorLdapConfigWithAfterCreate); ok {
		var err error
		if err = custom.AfterCreate(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// LdapAggregatorLdapConfigWithBeforeCreate called before DefaultCreateLdapConfig in the default Create handler
type LdapAggregatorLdapConfigWithBeforeCreate interface {
	BeforeCreate(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// LdapAggregatorLdapConfigWithAfterCreate called before DefaultCreateLdapConfig in the default Create handler
type LdapAggregatorLdapConfigWithAfterCreate interface {
	AfterCreate(context.Context, *CreateResponse, *gorm1.DB) error
}

// Read ...
func (m *LdapAggregatorDefaultServer) Read(ctx context.Context, in *ReadRequest) (*ReadResponse, error) {
	db := m.DB
	if custom, ok := interface{}(in).(LdapAggregatorLdapConfigWithBeforeRead); ok {
		var err error
		if db, err = custom.BeforeRead(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err := DefaultReadLdapConfig(ctx, &LdapConfig{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	out := &ReadResponse{Result: res}
	if custom, ok := interface{}(in).(LdapAggregatorLdapConfigWithAfterRead); ok {
		var err error
		if err = custom.AfterRead(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// LdapAggregatorLdapConfigWithBeforeRead called before DefaultReadLdapConfig in the default Read handler
type LdapAggregatorLdapConfigWithBeforeRead interface {
	BeforeRead(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// LdapAggregatorLdapConfigWithAfterRead called before DefaultReadLdapConfig in the default Read handler
type LdapAggregatorLdapConfigWithAfterRead interface {
	AfterRead(context.Context, *ReadResponse, *gorm1.DB) error
}

// Update ...
func (m *LdapAggregatorDefaultServer) Update(ctx context.Context, in *UpdateRequest) (*UpdateResponse, error) {
	var err error
	var res *LdapConfig
	db := m.DB
	if custom, ok := interface{}(in).(LdapAggregatorLdapConfigWithBeforeUpdate); ok {
		var err error
		if db, err = custom.BeforeUpdate(ctx, db); err != nil {
			return nil, err
		}
	}
	res, err = DefaultStrictUpdateLdapConfig(ctx, in.GetPayload(), db)
	if err != nil {
		return nil, err
	}
	out := &UpdateResponse{Result: res}
	if custom, ok := interface{}(in).(LdapAggregatorLdapConfigWithAfterUpdate); ok {
		var err error
		if err = custom.AfterUpdate(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// LdapAggregatorLdapConfigWithBeforeUpdate called before DefaultUpdateLdapConfig in the default Update handler
type LdapAggregatorLdapConfigWithBeforeUpdate interface {
	BeforeUpdate(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// LdapAggregatorLdapConfigWithAfterUpdate called before DefaultUpdateLdapConfig in the default Update handler
type LdapAggregatorLdapConfigWithAfterUpdate interface {
	AfterUpdate(context.Context, *UpdateResponse, *gorm1.DB) error
}

// Delete ...
func (m *LdapAggregatorDefaultServer) Delete(ctx context.Context, in *DeleteRequest) (*DeleteResponse, error) {
	db := m.DB
	if custom, ok := interface{}(in).(LdapAggregatorLdapConfigWithBeforeDelete); ok {
		var err error
		if db, err = custom.BeforeDelete(ctx, db); err != nil {
			return nil, err
		}
	}
	err := DefaultDeleteLdapConfig(ctx, &LdapConfig{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	out := &DeleteResponse{}
	if custom, ok := interface{}(in).(LdapAggregatorLdapConfigWithAfterDelete); ok {
		var err error
		if err = custom.AfterDelete(ctx, out, db); err != nil {
			return nil, err
		}
	}
	return out, nil
}

// LdapAggregatorLdapConfigWithBeforeDelete called before DefaultDeleteLdapConfig in the default Delete handler
type LdapAggregatorLdapConfigWithBeforeDelete interface {
	BeforeDelete(context.Context, *gorm1.DB) (*gorm1.DB, error)
}

// LdapAggregatorLdapConfigWithAfterDelete called before DefaultDeleteLdapConfig in the default Delete handler
type LdapAggregatorLdapConfigWithAfterDelete interface {
	AfterDelete(context.Context, *DeleteResponse, *gorm1.DB) error
}
