// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        (unknown)
// source: config.proto

package ldapaggregator

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/partitio/protoc-gen-gorm/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LdapConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id is the host ...
	Id string `protobuf:"bytes,14,opt,name=id,proto3" json:"id,omitempty"`
	// The host and optional port of the LDAP server. If port isn't supplied, it will be
	// guessed based on the TLS configuration. 389 or 636.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Required if LDAP host does not use TLS.
	InsecureNoSSL bool `protobuf:"varint,2,opt,name=insecureNoSSL,proto3" json:"insecureNoSSL,omitempty"`
	// Don't verify the CA.
	InsecureSkipVerify bool `protobuf:"varint,3,opt,name=insecureSkipVerify,proto3" json:"insecureSkipVerify,omitempty"`
	// Connect to the insecure port then issue a StartTLS command to negotiate a
	// secure connection. If unsupplied secure connections will use the LDAPS
	// protocol.
	StartTLS bool `protobuf:"varint,4,opt,name=startTLS,proto3" json:"startTLS,omitempty"`
	// Trusted root certificate file.
	RootCA string `protobuf:"bytes,5,opt,name=rootCA,proto3" json:"rootCA,omitempty"`
	// Path to a client cert file generated by rootCA.
	ClientCert string `protobuf:"bytes,6,opt,name=clientCert,proto3" json:"clientCert,omitempty"`
	// Path to a client private key file generated by rootCA.
	ClientKey string `protobuf:"bytes,7,opt,name=clientKey,proto3" json:"clientKey,omitempty"`
	// Base64 encoded PEM data containing root CAs.
	RootCAData []byte `protobuf:"bytes,8,opt,name=rootCAData,proto3" json:"rootCAData,omitempty"`
	// BindDN and BindPW for an application service account. The connector uses these
	// credentials to search for users and groups.
	BindDN string `protobuf:"bytes,9,opt,name=bindDN,proto3" json:"bindDN,omitempty"`
	BindPW string `protobuf:"bytes,10,opt,name=bindPW,proto3" json:"bindPW,omitempty"`
	// UsernamePrompt allows users to override the username attribute (displayed
	// in the username/password prompt). If unset, the handler will use
	// "Username".
	UsernamePrompt string       `protobuf:"bytes,11,opt,name=usernamePrompt,proto3" json:"usernamePrompt,omitempty"`
	UserSearch     *UserSearch  `protobuf:"bytes,12,opt,name=userSearch,proto3" json:"userSearch,omitempty"`
	GroupSearch    *GroupSearch `protobuf:"bytes,13,opt,name=groupSearch,proto3" json:"groupSearch,omitempty"`
}

func (x *LdapConfig) Reset() {
	*x = LdapConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LdapConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LdapConfig) ProtoMessage() {}

func (x *LdapConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LdapConfig.ProtoReflect.Descriptor instead.
func (*LdapConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *LdapConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LdapConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *LdapConfig) GetInsecureNoSSL() bool {
	if x != nil {
		return x.InsecureNoSSL
	}
	return false
}

func (x *LdapConfig) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

func (x *LdapConfig) GetStartTLS() bool {
	if x != nil {
		return x.StartTLS
	}
	return false
}

func (x *LdapConfig) GetRootCA() string {
	if x != nil {
		return x.RootCA
	}
	return ""
}

func (x *LdapConfig) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *LdapConfig) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *LdapConfig) GetRootCAData() []byte {
	if x != nil {
		return x.RootCAData
	}
	return nil
}

func (x *LdapConfig) GetBindDN() string {
	if x != nil {
		return x.BindDN
	}
	return ""
}

func (x *LdapConfig) GetBindPW() string {
	if x != nil {
		return x.BindPW
	}
	return ""
}

func (x *LdapConfig) GetUsernamePrompt() string {
	if x != nil {
		return x.UsernamePrompt
	}
	return ""
}

func (x *LdapConfig) GetUserSearch() *UserSearch {
	if x != nil {
		return x.UserSearch
	}
	return nil
}

func (x *LdapConfig) GetGroupSearch() *GroupSearch {
	if x != nil {
		return x.GroupSearch
	}
	return nil
}

// User entry search configuration.
type UserSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BaseDN to start the search from. For example "cn=users,dc=example,dc=com"
	BaseDN string `protobuf:"bytes,1,opt,name=baseDN,proto3" json:"baseDN,omitempty"`
	// Optional filter to apply when searching the directory. For example "(objectClass=person)"
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Attribute to match against the inputted username. This will be translated and combined
	// with the other filter as "(<attr>=<username>)".
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Can either be:
	// * "sub" - search the whole sub tree
	// * "one" - only search one level
	Scope string `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	// A mapping of attributes on the user entry to claims.
	IdAttr    string `protobuf:"bytes,5,opt,name=idAttr,proto3" json:"idAttr,omitempty"`       // Defaults to "uid"
	EmailAttr string `protobuf:"bytes,6,opt,name=emailAttr,proto3" json:"emailAttr,omitempty"` // Defaults to "mail"
	NameAttr  string `protobuf:"bytes,7,opt,name=nameAttr,proto3" json:"nameAttr,omitempty"`   // No default.
	// If this is set, the email claim of the id token will be constructed from the idAttr and
	// value of emailSuffix. This should not include the @ character.
	EmailSuffix string `protobuf:"bytes,8,opt,name=emailSuffix,proto3" json:"emailSuffix,omitempty"` // No default.
}

func (x *UserSearch) Reset() {
	*x = UserSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSearch) ProtoMessage() {}

func (x *UserSearch) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSearch.ProtoReflect.Descriptor instead.
func (*UserSearch) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *UserSearch) GetBaseDN() string {
	if x != nil {
		return x.BaseDN
	}
	return ""
}

func (x *UserSearch) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *UserSearch) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserSearch) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *UserSearch) GetIdAttr() string {
	if x != nil {
		return x.IdAttr
	}
	return ""
}

func (x *UserSearch) GetEmailAttr() string {
	if x != nil {
		return x.EmailAttr
	}
	return ""
}

func (x *UserSearch) GetNameAttr() string {
	if x != nil {
		return x.NameAttr
	}
	return ""
}

func (x *UserSearch) GetEmailSuffix() string {
	if x != nil {
		return x.EmailSuffix
	}
	return ""
}

// Group search configuration.
type GroupSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BaseDN to start the search from. For example "cn=groups,dc=example,dc=com"
	BaseDN string `protobuf:"bytes,1,opt,name=baseDN,proto3" json:"baseDN,omitempty"`
	// Optional filter to apply when searching the directory. For example "(objectClass=posixGroup)"
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Scope  string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"` // Defaults to "sub"
	// These two fields are use to match a user to a group.
	//
	// It adds an additional requirement to the filter that an attribute in the group
	// match the user's attribute value. For example that the "members" attribute of
	// a group matches the "uid" of the user. The exact filter being added is:
	//
	//   (<groupAttr>=<userAttr value>)
	//
	UserAttr  string `protobuf:"bytes,4,opt,name=userAttr,proto3" json:"userAttr,omitempty"`
	GroupAttr string `protobuf:"bytes,5,opt,name=groupAttr,proto3" json:"groupAttr,omitempty"`
	// The attribute of the group that represents its name.
	NameAttr string `protobuf:"bytes,6,opt,name=nameAttr,proto3" json:"nameAttr,omitempty"`
}

func (x *GroupSearch) Reset() {
	*x = GroupSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSearch) ProtoMessage() {}

func (x *GroupSearch) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSearch.ProtoReflect.Descriptor instead.
func (*GroupSearch) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *GroupSearch) GetBaseDN() string {
	if x != nil {
		return x.BaseDN
	}
	return ""
}

func (x *GroupSearch) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GroupSearch) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *GroupSearch) GetUserAttr() string {
	if x != nil {
		return x.UserAttr
	}
	return ""
}

func (x *GroupSearch) GetGroupAttr() string {
	if x != nil {
		return x.GroupAttr
	}
	return ""
}

func (x *GroupSearch) GetNameAttr() string {
	if x != nil {
		return x.NameAttr
	}
	return ""
}

var File_config_proto protoreflect.FileDescriptor

var file_config_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x6c, 0x64, 0x61, 0x70, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x1a,
	0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf6, 0x04, 0x0a, 0x0a, 0x4c, 0x64, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x4e,
	0x6f, 0x53, 0x53, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x53, 0x53, 0x4c, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53,
	0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x4c, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x4c, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x41, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x41, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x6f, 0x6f, 0x74, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x41, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x06, 0x62,
	0x69, 0x6e, 0x64, 0x44, 0x4e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0xe9, 0xc0,
	0x03, 0x04, 0x72, 0x02, 0x10, 0x03, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x44, 0x4e, 0x12, 0x27,
	0x0a, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x50, 0x57, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xba, 0xb9, 0x19, 0x02, 0x10, 0x01, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x72, 0x02, 0x10, 0x03, 0x52,
	0x06, 0x62, 0x69, 0x6e, 0x64, 0x50, 0x57, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12,
	0x64, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x64, 0x61, 0x70, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x42, 0x27, 0xba, 0xb9, 0x19, 0x19, 0x0a, 0x17, 0x60, 0x01, 0x6a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x7a, 0x01, 0x2d, 0x82, 0x01, 0x01, 0x2d, 0xba,
	0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x68, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x64, 0x61,
	0x70, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x28, 0xba, 0xb9, 0x19, 0x1a, 0x0a, 0x18,
	0x60, 0x01, 0x6a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x7a, 0x01, 0x2d, 0x82, 0x01, 0x01, 0x2d, 0xba, 0xe9, 0xc0, 0x03, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a,
	0x18, 0xba, 0xb9, 0x19, 0x14, 0x08, 0x01, 0x12, 0x10, 0x0a, 0x06, 0x5b, 0x5d, 0x62, 0x79, 0x74,
	0x65, 0x12, 0x06, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x57, 0x22, 0x8a, 0x02, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x65,
	0x44, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0xe9, 0xc0, 0x03, 0x04, 0x72,
	0x02, 0x10, 0x02, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x44, 0x4e, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0xba, 0xe9, 0xc0, 0x03, 0x0e, 0x72, 0x0c, 0x52, 0x00, 0x52, 0x03, 0x73, 0x75, 0x62, 0x52, 0x03,
	0x6f, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x3a, 0x06,
	0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x65, 0x44, 0x4e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x44, 0x4e, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0xe9, 0xc0, 0x03, 0x0e, 0x72, 0x0c, 0x52, 0x00,
	0x52, 0x03, 0x73, 0x75, 0x62, 0x52, 0x03, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x42,
	0x10, 0x5a, 0x0e, 0x6c, 0x64, 0x61, 0x70, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData = file_config_proto_rawDesc
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_proto_rawDescData)
	})
	return file_config_proto_rawDescData
}

var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_config_proto_goTypes = []interface{}{
	(*LdapConfig)(nil),  // 0: ldap_aggregator.LdapConfig
	(*UserSearch)(nil),  // 1: ldap_aggregator.UserSearch
	(*GroupSearch)(nil), // 2: ldap_aggregator.GroupSearch
}
var file_config_proto_depIdxs = []int32{
	1, // 0: ldap_aggregator.LdapConfig.userSearch:type_name -> ldap_aggregator.UserSearch
	2, // 1: ldap_aggregator.LdapConfig.groupSearch:type_name -> ldap_aggregator.GroupSearch
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LdapConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_rawDesc = nil
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
