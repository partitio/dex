// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api/api.proto

It has these top-level messages:
	Client
	CreateClientReq
	CreateClientResp
	DeleteClientReq
	DeleteClientResp
	UpdateClientReq
	UpdateClientResp
	Password
	CreatePasswordReq
	CreatePasswordResp
	UpdatePasswordReq
	UpdatePasswordResp
	DeletePasswordReq
	DeletePasswordResp
	ListPasswordReq
	ListPasswordResp
	VersionReq
	VersionResp
	RefreshTokenRef
	ListRefreshReq
	ListRefreshResp
	RevokeRefreshReq
	RevokeRefreshResp
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Dex service

type DexService interface {
	// CreateClient creates a client.
	CreateClient(ctx context.Context, in *CreateClientReq, opts ...client.CallOption) (*CreateClientResp, error)
	// UpdateClient updates an existing client
	UpdateClient(ctx context.Context, in *UpdateClientReq, opts ...client.CallOption) (*UpdateClientResp, error)
	// DeleteClient deletes the provided client.
	DeleteClient(ctx context.Context, in *DeleteClientReq, opts ...client.CallOption) (*DeleteClientResp, error)
	// CreatePassword creates a password.
	CreatePassword(ctx context.Context, in *CreatePasswordReq, opts ...client.CallOption) (*CreatePasswordResp, error)
	// UpdatePassword modifies existing password.
	UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...client.CallOption) (*UpdatePasswordResp, error)
	// DeletePassword deletes the password.
	DeletePassword(ctx context.Context, in *DeletePasswordReq, opts ...client.CallOption) (*DeletePasswordResp, error)
	// ListPassword lists all password entries.
	ListPasswords(ctx context.Context, in *ListPasswordReq, opts ...client.CallOption) (*ListPasswordResp, error)
	// GetVersion returns version information of the server.
	GetVersion(ctx context.Context, in *VersionReq, opts ...client.CallOption) (*VersionResp, error)
	// ListRefresh lists all the refresh token entries for a particular user.
	ListRefresh(ctx context.Context, in *ListRefreshReq, opts ...client.CallOption) (*ListRefreshResp, error)
	// RevokeRefresh revokes the refresh token for the provided user-client pair.
	//
	// Note that each user-client pair can have only one refresh token at a time.
	RevokeRefresh(ctx context.Context, in *RevokeRefreshReq, opts ...client.CallOption) (*RevokeRefreshResp, error)
}

type dexService struct {
	c    client.Client
	name string
}

func NewDexService(name string, c client.Client) DexService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "api"
	}
	return &dexService{
		c:    c,
		name: name,
	}
}

func (c *dexService) CreateClient(ctx context.Context, in *CreateClientReq, opts ...client.CallOption) (*CreateClientResp, error) {
	req := c.c.NewRequest(c.name, "Dex.CreateClient", in)
	out := new(CreateClientResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexService) UpdateClient(ctx context.Context, in *UpdateClientReq, opts ...client.CallOption) (*UpdateClientResp, error) {
	req := c.c.NewRequest(c.name, "Dex.UpdateClient", in)
	out := new(UpdateClientResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexService) DeleteClient(ctx context.Context, in *DeleteClientReq, opts ...client.CallOption) (*DeleteClientResp, error) {
	req := c.c.NewRequest(c.name, "Dex.DeleteClient", in)
	out := new(DeleteClientResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexService) CreatePassword(ctx context.Context, in *CreatePasswordReq, opts ...client.CallOption) (*CreatePasswordResp, error) {
	req := c.c.NewRequest(c.name, "Dex.CreatePassword", in)
	out := new(CreatePasswordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexService) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...client.CallOption) (*UpdatePasswordResp, error) {
	req := c.c.NewRequest(c.name, "Dex.UpdatePassword", in)
	out := new(UpdatePasswordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexService) DeletePassword(ctx context.Context, in *DeletePasswordReq, opts ...client.CallOption) (*DeletePasswordResp, error) {
	req := c.c.NewRequest(c.name, "Dex.DeletePassword", in)
	out := new(DeletePasswordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexService) ListPasswords(ctx context.Context, in *ListPasswordReq, opts ...client.CallOption) (*ListPasswordResp, error) {
	req := c.c.NewRequest(c.name, "Dex.ListPasswords", in)
	out := new(ListPasswordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexService) GetVersion(ctx context.Context, in *VersionReq, opts ...client.CallOption) (*VersionResp, error) {
	req := c.c.NewRequest(c.name, "Dex.GetVersion", in)
	out := new(VersionResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexService) ListRefresh(ctx context.Context, in *ListRefreshReq, opts ...client.CallOption) (*ListRefreshResp, error) {
	req := c.c.NewRequest(c.name, "Dex.ListRefresh", in)
	out := new(ListRefreshResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dexService) RevokeRefresh(ctx context.Context, in *RevokeRefreshReq, opts ...client.CallOption) (*RevokeRefreshResp, error) {
	req := c.c.NewRequest(c.name, "Dex.RevokeRefresh", in)
	out := new(RevokeRefreshResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dex service

type DexHandler interface {
	// CreateClient creates a client.
	CreateClient(context.Context, *CreateClientReq, *CreateClientResp) error
	// UpdateClient updates an existing client
	UpdateClient(context.Context, *UpdateClientReq, *UpdateClientResp) error
	// DeleteClient deletes the provided client.
	DeleteClient(context.Context, *DeleteClientReq, *DeleteClientResp) error
	// CreatePassword creates a password.
	CreatePassword(context.Context, *CreatePasswordReq, *CreatePasswordResp) error
	// UpdatePassword modifies existing password.
	UpdatePassword(context.Context, *UpdatePasswordReq, *UpdatePasswordResp) error
	// DeletePassword deletes the password.
	DeletePassword(context.Context, *DeletePasswordReq, *DeletePasswordResp) error
	// ListPassword lists all password entries.
	ListPasswords(context.Context, *ListPasswordReq, *ListPasswordResp) error
	// GetVersion returns version information of the server.
	GetVersion(context.Context, *VersionReq, *VersionResp) error
	// ListRefresh lists all the refresh token entries for a particular user.
	ListRefresh(context.Context, *ListRefreshReq, *ListRefreshResp) error
	// RevokeRefresh revokes the refresh token for the provided user-client pair.
	//
	// Note that each user-client pair can have only one refresh token at a time.
	RevokeRefresh(context.Context, *RevokeRefreshReq, *RevokeRefreshResp) error
}

func RegisterDexHandler(s server.Server, hdlr DexHandler, opts ...server.HandlerOption) error {
	type dex interface {
		CreateClient(ctx context.Context, in *CreateClientReq, out *CreateClientResp) error
		UpdateClient(ctx context.Context, in *UpdateClientReq, out *UpdateClientResp) error
		DeleteClient(ctx context.Context, in *DeleteClientReq, out *DeleteClientResp) error
		CreatePassword(ctx context.Context, in *CreatePasswordReq, out *CreatePasswordResp) error
		UpdatePassword(ctx context.Context, in *UpdatePasswordReq, out *UpdatePasswordResp) error
		DeletePassword(ctx context.Context, in *DeletePasswordReq, out *DeletePasswordResp) error
		ListPasswords(ctx context.Context, in *ListPasswordReq, out *ListPasswordResp) error
		GetVersion(ctx context.Context, in *VersionReq, out *VersionResp) error
		ListRefresh(ctx context.Context, in *ListRefreshReq, out *ListRefreshResp) error
		RevokeRefresh(ctx context.Context, in *RevokeRefreshReq, out *RevokeRefreshResp) error
	}
	type Dex struct {
		dex
	}
	h := &dexHandler{hdlr}
	return s.Handle(s.NewHandler(&Dex{h}, opts...))
}

type dexHandler struct {
	DexHandler
}

func (h *dexHandler) CreateClient(ctx context.Context, in *CreateClientReq, out *CreateClientResp) error {
	return h.DexHandler.CreateClient(ctx, in, out)
}

func (h *dexHandler) UpdateClient(ctx context.Context, in *UpdateClientReq, out *UpdateClientResp) error {
	return h.DexHandler.UpdateClient(ctx, in, out)
}

func (h *dexHandler) DeleteClient(ctx context.Context, in *DeleteClientReq, out *DeleteClientResp) error {
	return h.DexHandler.DeleteClient(ctx, in, out)
}

func (h *dexHandler) CreatePassword(ctx context.Context, in *CreatePasswordReq, out *CreatePasswordResp) error {
	return h.DexHandler.CreatePassword(ctx, in, out)
}

func (h *dexHandler) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, out *UpdatePasswordResp) error {
	return h.DexHandler.UpdatePassword(ctx, in, out)
}

func (h *dexHandler) DeletePassword(ctx context.Context, in *DeletePasswordReq, out *DeletePasswordResp) error {
	return h.DexHandler.DeletePassword(ctx, in, out)
}

func (h *dexHandler) ListPasswords(ctx context.Context, in *ListPasswordReq, out *ListPasswordResp) error {
	return h.DexHandler.ListPasswords(ctx, in, out)
}

func (h *dexHandler) GetVersion(ctx context.Context, in *VersionReq, out *VersionResp) error {
	return h.DexHandler.GetVersion(ctx, in, out)
}

func (h *dexHandler) ListRefresh(ctx context.Context, in *ListRefreshReq, out *ListRefreshResp) error {
	return h.DexHandler.ListRefresh(ctx, in, out)
}

func (h *dexHandler) RevokeRefresh(ctx context.Context, in *RevokeRefreshReq, out *RevokeRefreshResp) error {
	return h.DexHandler.RevokeRefresh(ctx, in, out)
}
